// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: kakeibo/v1/kakeibo.proto

package kakeibov1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/matorix/kakeibo.fdbm.dev/gen/kakeibo/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// KakeiboServiceName is the fully-qualified name of the KakeiboService service.
	KakeiboServiceName = "kakeibo.v1.KakeiboService"
)

// KakeiboServiceClient is a client for the kakeibo.v1.KakeiboService service.
type KakeiboServiceClient interface {
	SignIn(context.Context, *connect_go.Request[v1.SignInRequest]) (*connect_go.Response[v1.SignInResponse], error)
	GetLedger(context.Context, *connect_go.Request[v1.GetLedgerRequest]) (*connect_go.Response[v1.GetLedgerResponse], error)
	AddLedger(context.Context, *connect_go.Request[v1.AddLedgerRequest]) (*connect_go.Response[v1.AddLedgerResponse], error)
	UpdateLedger(context.Context, *connect_go.Request[v1.UpdateLedgerRequest]) (*connect_go.Response[v1.UpdateLedgerResponse], error)
	RemoveLedger(context.Context, *connect_go.Request[v1.RemoveLedgerRequest]) (*connect_go.Response[v1.RemoveLedgerResponse], error)
	AddLedgerMember(context.Context, *connect_go.Request[v1.AddLedgerMemberRequest]) (*connect_go.Response[v1.AddLedgerMemberResponse], error)
	RemoveLedgerMember(context.Context, *connect_go.Request[v1.RemoveLedgerMemberRequest]) (*connect_go.Response[v1.RemoveLedgerMemberResponse], error)
	AddLine(context.Context, *connect_go.Request[v1.AddLineRequest]) (*connect_go.Response[v1.AddLineResponse], error)
	UpdateLine(context.Context, *connect_go.Request[v1.UpdateLineRequest]) (*connect_go.Response[v1.UpdateLineResponse], error)
	RemoveLine(context.Context, *connect_go.Request[v1.RemoveLineRequest]) (*connect_go.Response[v1.RemoveLineResponse], error)
	ListLine(context.Context, *connect_go.Request[v1.ListLineRequest]) (*connect_go.Response[v1.ListLineResponse], error)
}

// NewKakeiboServiceClient constructs a client for the kakeibo.v1.KakeiboService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKakeiboServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) KakeiboServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &kakeiboServiceClient{
		signIn: connect_go.NewClient[v1.SignInRequest, v1.SignInResponse](
			httpClient,
			baseURL+"/kakeibo.v1.KakeiboService/SignIn",
			opts...,
		),
		getLedger: connect_go.NewClient[v1.GetLedgerRequest, v1.GetLedgerResponse](
			httpClient,
			baseURL+"/kakeibo.v1.KakeiboService/GetLedger",
			opts...,
		),
		addLedger: connect_go.NewClient[v1.AddLedgerRequest, v1.AddLedgerResponse](
			httpClient,
			baseURL+"/kakeibo.v1.KakeiboService/AddLedger",
			opts...,
		),
		updateLedger: connect_go.NewClient[v1.UpdateLedgerRequest, v1.UpdateLedgerResponse](
			httpClient,
			baseURL+"/kakeibo.v1.KakeiboService/UpdateLedger",
			opts...,
		),
		removeLedger: connect_go.NewClient[v1.RemoveLedgerRequest, v1.RemoveLedgerResponse](
			httpClient,
			baseURL+"/kakeibo.v1.KakeiboService/RemoveLedger",
			opts...,
		),
		addLedgerMember: connect_go.NewClient[v1.AddLedgerMemberRequest, v1.AddLedgerMemberResponse](
			httpClient,
			baseURL+"/kakeibo.v1.KakeiboService/AddLedgerMember",
			opts...,
		),
		removeLedgerMember: connect_go.NewClient[v1.RemoveLedgerMemberRequest, v1.RemoveLedgerMemberResponse](
			httpClient,
			baseURL+"/kakeibo.v1.KakeiboService/RemoveLedgerMember",
			opts...,
		),
		addLine: connect_go.NewClient[v1.AddLineRequest, v1.AddLineResponse](
			httpClient,
			baseURL+"/kakeibo.v1.KakeiboService/AddLine",
			opts...,
		),
		updateLine: connect_go.NewClient[v1.UpdateLineRequest, v1.UpdateLineResponse](
			httpClient,
			baseURL+"/kakeibo.v1.KakeiboService/UpdateLine",
			opts...,
		),
		removeLine: connect_go.NewClient[v1.RemoveLineRequest, v1.RemoveLineResponse](
			httpClient,
			baseURL+"/kakeibo.v1.KakeiboService/RemoveLine",
			opts...,
		),
		listLine: connect_go.NewClient[v1.ListLineRequest, v1.ListLineResponse](
			httpClient,
			baseURL+"/kakeibo.v1.KakeiboService/ListLine",
			opts...,
		),
	}
}

// kakeiboServiceClient implements KakeiboServiceClient.
type kakeiboServiceClient struct {
	signIn             *connect_go.Client[v1.SignInRequest, v1.SignInResponse]
	getLedger          *connect_go.Client[v1.GetLedgerRequest, v1.GetLedgerResponse]
	addLedger          *connect_go.Client[v1.AddLedgerRequest, v1.AddLedgerResponse]
	updateLedger       *connect_go.Client[v1.UpdateLedgerRequest, v1.UpdateLedgerResponse]
	removeLedger       *connect_go.Client[v1.RemoveLedgerRequest, v1.RemoveLedgerResponse]
	addLedgerMember    *connect_go.Client[v1.AddLedgerMemberRequest, v1.AddLedgerMemberResponse]
	removeLedgerMember *connect_go.Client[v1.RemoveLedgerMemberRequest, v1.RemoveLedgerMemberResponse]
	addLine            *connect_go.Client[v1.AddLineRequest, v1.AddLineResponse]
	updateLine         *connect_go.Client[v1.UpdateLineRequest, v1.UpdateLineResponse]
	removeLine         *connect_go.Client[v1.RemoveLineRequest, v1.RemoveLineResponse]
	listLine           *connect_go.Client[v1.ListLineRequest, v1.ListLineResponse]
}

// SignIn calls kakeibo.v1.KakeiboService.SignIn.
func (c *kakeiboServiceClient) SignIn(ctx context.Context, req *connect_go.Request[v1.SignInRequest]) (*connect_go.Response[v1.SignInResponse], error) {
	return c.signIn.CallUnary(ctx, req)
}

// GetLedger calls kakeibo.v1.KakeiboService.GetLedger.
func (c *kakeiboServiceClient) GetLedger(ctx context.Context, req *connect_go.Request[v1.GetLedgerRequest]) (*connect_go.Response[v1.GetLedgerResponse], error) {
	return c.getLedger.CallUnary(ctx, req)
}

// AddLedger calls kakeibo.v1.KakeiboService.AddLedger.
func (c *kakeiboServiceClient) AddLedger(ctx context.Context, req *connect_go.Request[v1.AddLedgerRequest]) (*connect_go.Response[v1.AddLedgerResponse], error) {
	return c.addLedger.CallUnary(ctx, req)
}

// UpdateLedger calls kakeibo.v1.KakeiboService.UpdateLedger.
func (c *kakeiboServiceClient) UpdateLedger(ctx context.Context, req *connect_go.Request[v1.UpdateLedgerRequest]) (*connect_go.Response[v1.UpdateLedgerResponse], error) {
	return c.updateLedger.CallUnary(ctx, req)
}

// RemoveLedger calls kakeibo.v1.KakeiboService.RemoveLedger.
func (c *kakeiboServiceClient) RemoveLedger(ctx context.Context, req *connect_go.Request[v1.RemoveLedgerRequest]) (*connect_go.Response[v1.RemoveLedgerResponse], error) {
	return c.removeLedger.CallUnary(ctx, req)
}

// AddLedgerMember calls kakeibo.v1.KakeiboService.AddLedgerMember.
func (c *kakeiboServiceClient) AddLedgerMember(ctx context.Context, req *connect_go.Request[v1.AddLedgerMemberRequest]) (*connect_go.Response[v1.AddLedgerMemberResponse], error) {
	return c.addLedgerMember.CallUnary(ctx, req)
}

// RemoveLedgerMember calls kakeibo.v1.KakeiboService.RemoveLedgerMember.
func (c *kakeiboServiceClient) RemoveLedgerMember(ctx context.Context, req *connect_go.Request[v1.RemoveLedgerMemberRequest]) (*connect_go.Response[v1.RemoveLedgerMemberResponse], error) {
	return c.removeLedgerMember.CallUnary(ctx, req)
}

// AddLine calls kakeibo.v1.KakeiboService.AddLine.
func (c *kakeiboServiceClient) AddLine(ctx context.Context, req *connect_go.Request[v1.AddLineRequest]) (*connect_go.Response[v1.AddLineResponse], error) {
	return c.addLine.CallUnary(ctx, req)
}

// UpdateLine calls kakeibo.v1.KakeiboService.UpdateLine.
func (c *kakeiboServiceClient) UpdateLine(ctx context.Context, req *connect_go.Request[v1.UpdateLineRequest]) (*connect_go.Response[v1.UpdateLineResponse], error) {
	return c.updateLine.CallUnary(ctx, req)
}

// RemoveLine calls kakeibo.v1.KakeiboService.RemoveLine.
func (c *kakeiboServiceClient) RemoveLine(ctx context.Context, req *connect_go.Request[v1.RemoveLineRequest]) (*connect_go.Response[v1.RemoveLineResponse], error) {
	return c.removeLine.CallUnary(ctx, req)
}

// ListLine calls kakeibo.v1.KakeiboService.ListLine.
func (c *kakeiboServiceClient) ListLine(ctx context.Context, req *connect_go.Request[v1.ListLineRequest]) (*connect_go.Response[v1.ListLineResponse], error) {
	return c.listLine.CallUnary(ctx, req)
}

// KakeiboServiceHandler is an implementation of the kakeibo.v1.KakeiboService service.
type KakeiboServiceHandler interface {
	SignIn(context.Context, *connect_go.Request[v1.SignInRequest]) (*connect_go.Response[v1.SignInResponse], error)
	GetLedger(context.Context, *connect_go.Request[v1.GetLedgerRequest]) (*connect_go.Response[v1.GetLedgerResponse], error)
	AddLedger(context.Context, *connect_go.Request[v1.AddLedgerRequest]) (*connect_go.Response[v1.AddLedgerResponse], error)
	UpdateLedger(context.Context, *connect_go.Request[v1.UpdateLedgerRequest]) (*connect_go.Response[v1.UpdateLedgerResponse], error)
	RemoveLedger(context.Context, *connect_go.Request[v1.RemoveLedgerRequest]) (*connect_go.Response[v1.RemoveLedgerResponse], error)
	AddLedgerMember(context.Context, *connect_go.Request[v1.AddLedgerMemberRequest]) (*connect_go.Response[v1.AddLedgerMemberResponse], error)
	RemoveLedgerMember(context.Context, *connect_go.Request[v1.RemoveLedgerMemberRequest]) (*connect_go.Response[v1.RemoveLedgerMemberResponse], error)
	AddLine(context.Context, *connect_go.Request[v1.AddLineRequest]) (*connect_go.Response[v1.AddLineResponse], error)
	UpdateLine(context.Context, *connect_go.Request[v1.UpdateLineRequest]) (*connect_go.Response[v1.UpdateLineResponse], error)
	RemoveLine(context.Context, *connect_go.Request[v1.RemoveLineRequest]) (*connect_go.Response[v1.RemoveLineResponse], error)
	ListLine(context.Context, *connect_go.Request[v1.ListLineRequest]) (*connect_go.Response[v1.ListLineResponse], error)
}

// NewKakeiboServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKakeiboServiceHandler(svc KakeiboServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/kakeibo.v1.KakeiboService/SignIn", connect_go.NewUnaryHandler(
		"/kakeibo.v1.KakeiboService/SignIn",
		svc.SignIn,
		opts...,
	))
	mux.Handle("/kakeibo.v1.KakeiboService/GetLedger", connect_go.NewUnaryHandler(
		"/kakeibo.v1.KakeiboService/GetLedger",
		svc.GetLedger,
		opts...,
	))
	mux.Handle("/kakeibo.v1.KakeiboService/AddLedger", connect_go.NewUnaryHandler(
		"/kakeibo.v1.KakeiboService/AddLedger",
		svc.AddLedger,
		opts...,
	))
	mux.Handle("/kakeibo.v1.KakeiboService/UpdateLedger", connect_go.NewUnaryHandler(
		"/kakeibo.v1.KakeiboService/UpdateLedger",
		svc.UpdateLedger,
		opts...,
	))
	mux.Handle("/kakeibo.v1.KakeiboService/RemoveLedger", connect_go.NewUnaryHandler(
		"/kakeibo.v1.KakeiboService/RemoveLedger",
		svc.RemoveLedger,
		opts...,
	))
	mux.Handle("/kakeibo.v1.KakeiboService/AddLedgerMember", connect_go.NewUnaryHandler(
		"/kakeibo.v1.KakeiboService/AddLedgerMember",
		svc.AddLedgerMember,
		opts...,
	))
	mux.Handle("/kakeibo.v1.KakeiboService/RemoveLedgerMember", connect_go.NewUnaryHandler(
		"/kakeibo.v1.KakeiboService/RemoveLedgerMember",
		svc.RemoveLedgerMember,
		opts...,
	))
	mux.Handle("/kakeibo.v1.KakeiboService/AddLine", connect_go.NewUnaryHandler(
		"/kakeibo.v1.KakeiboService/AddLine",
		svc.AddLine,
		opts...,
	))
	mux.Handle("/kakeibo.v1.KakeiboService/UpdateLine", connect_go.NewUnaryHandler(
		"/kakeibo.v1.KakeiboService/UpdateLine",
		svc.UpdateLine,
		opts...,
	))
	mux.Handle("/kakeibo.v1.KakeiboService/RemoveLine", connect_go.NewUnaryHandler(
		"/kakeibo.v1.KakeiboService/RemoveLine",
		svc.RemoveLine,
		opts...,
	))
	mux.Handle("/kakeibo.v1.KakeiboService/ListLine", connect_go.NewUnaryHandler(
		"/kakeibo.v1.KakeiboService/ListLine",
		svc.ListLine,
		opts...,
	))
	return "/kakeibo.v1.KakeiboService/", mux
}

// UnimplementedKakeiboServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKakeiboServiceHandler struct{}

func (UnimplementedKakeiboServiceHandler) SignIn(context.Context, *connect_go.Request[v1.SignInRequest]) (*connect_go.Response[v1.SignInResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kakeibo.v1.KakeiboService.SignIn is not implemented"))
}

func (UnimplementedKakeiboServiceHandler) GetLedger(context.Context, *connect_go.Request[v1.GetLedgerRequest]) (*connect_go.Response[v1.GetLedgerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kakeibo.v1.KakeiboService.GetLedger is not implemented"))
}

func (UnimplementedKakeiboServiceHandler) AddLedger(context.Context, *connect_go.Request[v1.AddLedgerRequest]) (*connect_go.Response[v1.AddLedgerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kakeibo.v1.KakeiboService.AddLedger is not implemented"))
}

func (UnimplementedKakeiboServiceHandler) UpdateLedger(context.Context, *connect_go.Request[v1.UpdateLedgerRequest]) (*connect_go.Response[v1.UpdateLedgerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kakeibo.v1.KakeiboService.UpdateLedger is not implemented"))
}

func (UnimplementedKakeiboServiceHandler) RemoveLedger(context.Context, *connect_go.Request[v1.RemoveLedgerRequest]) (*connect_go.Response[v1.RemoveLedgerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kakeibo.v1.KakeiboService.RemoveLedger is not implemented"))
}

func (UnimplementedKakeiboServiceHandler) AddLedgerMember(context.Context, *connect_go.Request[v1.AddLedgerMemberRequest]) (*connect_go.Response[v1.AddLedgerMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kakeibo.v1.KakeiboService.AddLedgerMember is not implemented"))
}

func (UnimplementedKakeiboServiceHandler) RemoveLedgerMember(context.Context, *connect_go.Request[v1.RemoveLedgerMemberRequest]) (*connect_go.Response[v1.RemoveLedgerMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kakeibo.v1.KakeiboService.RemoveLedgerMember is not implemented"))
}

func (UnimplementedKakeiboServiceHandler) AddLine(context.Context, *connect_go.Request[v1.AddLineRequest]) (*connect_go.Response[v1.AddLineResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kakeibo.v1.KakeiboService.AddLine is not implemented"))
}

func (UnimplementedKakeiboServiceHandler) UpdateLine(context.Context, *connect_go.Request[v1.UpdateLineRequest]) (*connect_go.Response[v1.UpdateLineResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kakeibo.v1.KakeiboService.UpdateLine is not implemented"))
}

func (UnimplementedKakeiboServiceHandler) RemoveLine(context.Context, *connect_go.Request[v1.RemoveLineRequest]) (*connect_go.Response[v1.RemoveLineResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kakeibo.v1.KakeiboService.RemoveLine is not implemented"))
}

func (UnimplementedKakeiboServiceHandler) ListLine(context.Context, *connect_go.Request[v1.ListLineRequest]) (*connect_go.Response[v1.ListLineResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kakeibo.v1.KakeiboService.ListLine is not implemented"))
}
